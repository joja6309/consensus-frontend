import { ElementRef, ViewChild, Component, ViewContainerRef , OnInit, trigger, state, style, transition, animate } from '@angular/core';
import { SquareInjectorService } from '../square-injector.service';

@Component({
  selector: 'app-square',
  templateUrl: './square.component.html',
  styleUrls: ['./square.component.scss']
  ,
  animations: [
    trigger('flipState', [
      state('active', style({
        transform: 'rotateY(179.9deg)'
      })),
      state('inactive', style({
        transform: 'rotateY(0)'
      })),
      transition
        ('inactive => active', animate('500ms ease-in'))
    ])
  ]
})

export class SquareComponent implements OnInit {
  // private context: CanvasRenderingContext2D;
  // private count: number = 0;
  flip: string = 'inactive';
  public colPnt: number; 
  public rowPnt: number;
  public width: number;
  public height: number;
  @ViewChild('backAnchor') backRef: ElementRef;
  //@ViewChild('canvasAnchor', { read: ViewContainerRef }) canvasRef: ViewContainerRef;
  //public originalCtx: CanvasRenderingContext2D; 


  constructor(private elRef: ElementRef,
              private squareInjector:SquareInjectorService) 
  { 
   
  }

  toggleFlip() {
    this.flip = (this.flip == 'inactive') ? 'active' : 'inactive';
  }

  ngOnInit() {
  }
  //https://stackoverflow.com/questions/13073647/crop-canvas-export-html5-canvas-with-certain-width-and-height
   // Start at 10 pixels from the left and the top of the image (crop), 10, 10,
     // "Get" a `80 * 30` (w * h) area from the source image (crop), 80, 30,
    // Place the result at 0, 0 in the canvas,   0, 0, 
     // With as width / height: 160 * 60 (scale)    160, 60); 
     // -> | -> | -> 
     // v | v | v 
     //context.drawImage(imageObj, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
  ngAfterViewInit() {
    
  }

  drawCanvas()
  {
    //new image
    let image = new Image();
    image.src = this.squareInjector.imageSrc;
    image.crossOrigin = "Anonymous";
    let canvas = document.createElement('canvas');
    canvas.width = this.width;
    canvas.height = this.height;
    let renderingContext = canvas.getContext('2d');

    image.onload = () => 
    {
      renderingContext.drawImage(image,
        20, 20,
        image.height,
        image.width,
        0, 0, 80, 80)
    }
6196823727
    // this.ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, this.anchor1w, this.anchor1h);
    // this.squareInjector.
    //250
    //
   
    console.log(image.height)
    console.log(image.width)
    console.log("sourceWidth:" + this.squareInjector.cnvH + "sourceHeight: " + this.squareInjector.cnvW + "destWidth: " + this.height + "destHeight:" + this.width)


    this.backRef.nativeElement.appendChild(canvas);

    // console.log("col:" + this.squareInjector.columnPoint)
    // console.log("row:" + this.squareInjector.rowPoint)
    // console.log(this.squareInjector.image.height)
    // console.log(this.squareInjector.image.width)
    // console.log(this.height)
    // console.log(this.width)

    // this.backRef.nativeElement.appendChild('div')
    // this.backRef.nativeElement.appendChild('canvas');
    // <!-- < div class="tp-box__side tp-box__back" >
    //   </div> -->


  }


  

}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































